# R Script for the analysis of C. elegans RNA-Seq data
# RNA-Seq data derived from Pace University (Marcello Lab)
# Kallisto/Sleuth was developed by The Pachter Lab at Caltech
# Script edited by Scott Schumacker

# Download Bioconductor if you do not already have it installed
source("https://bioconductor.org/biocLite.R")
biocLite()

# Download BiomaRt
source("https://bioconductor.org/biocLite.R")
biocLite("biomaRt")

# Install cowplot and load for plots and visuals
install.packages("cowplot")
library(cowplot)  

# Install and load ggrepel to label data points within ggplot2
install.packages("ggrepel")
library("ggrepel")

# Download Sleuth
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
install.packages("devtools")
devtools::install_github("pachterlab/sleuth")

# Load the Sleuth package
library(sleuth)

# Paste the filepath of your Kallisto results between the quotation marks. 
sample_id <- dir(file.path(""))

# Return the names on your samples to check that they all populate
# in the console
sample_id

# Access each file path for each sample. Again, paste the same
# file path as before and also wright the sample_id
kal_dirs <- file.path("", 
                      sample_id)

# Return the file paths to check that they populate in the console
kal_dirs

# Create a design matrix table (.txt) file and save it
# Load the table - Paste file path in between the quotation marks
# Assign the variable 's2c'
s2c <- read.table(file.path(""),
                  header = TRUE,
                  stringsAsFactors = FALSE,
                  sep = "\t")

# Return the table to see if it populates in the console correctly
s2c

# Add the directories as a final table column called 'path'
s2c <- dplyr::mutate(s2c, path = kal_dirs)

# Return the updated table to see if it appears in the console correctly
print(s2c)

# Load biomaRt into the project
library(biomaRt)

# List the possible marts to view and pick one of your choice
listMarts()

# Assign the variable 'ensembl'
# Choose which mart to use. Insert mart of choice betwwen quotation marks
# In this case we will use the mart 'ENSEMBL_MART_ENSEMBL'
ensembl = useMart("ENSEMBL_MART_ENSEMBL")

# List the datasets within the mart to see which one you need
listDatasets(ensembl)

# Load genes of choice by assigning the variabel 'mart'
# to which mart, dataset, and the host for the data
mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",
                         dataset = "celegans_gene_ensembl",
                         host = "www.ensembl.org")

# Get target transcripts from bioMart
t2g <- biomaRt::getBM(
  attributes = c("ensembl_transcript_id",
                 "ensembl_gene_id", "external_gene_name", "description",
                 "transcript_biotype"), mart = mart)

# Renaming the output from BioMart to make it easier to work
# within sleuth
t2g <- dplyr::select(t2g, 
                     target_id = ensembl_transcript_id, ens_gene = ensembl_gene_id, Gene_Name = external_gene_name, 
                     description, transcript_biotype)

# Return the preview listing of transcripts to see if they populate in 
# console. Not all transcripts will populate due 'head' function
head(t2g)

# Create the "Sleuth Object": a data structure that contains the results
so <- sleuth_prep(s2c,
                  target_mapping = t2g,
                  extra_bootstrap_summary = TRUE)

# Check to see if target mapping worked with data and bioMArt was
# successful
View(so$target_mapping)

# Check the structure of the data with a PCA plot

# Create bold plot elements
boldTextPlot <- element_text(face = "bold", color = "black", size = 19)
boldTextAxis <- element_text(face = "bold", color = "black", size = 19)

# Plot Basic PCA:
# With points
plot_pca(so, color_by = 'treatment', point_size = 7)

# With Labels
plot_pca(so, color_by = 'treatment', text_labels = TRUE)

# Assigning the pca plot to the variable 'PCA'
PCA <- plot_pca(so, color_by = 'treatment', point_size = 7)

# Return the plot to view
PCA

# Creating plot edits (Bold Elements)
PCA <- PCA + theme(text = boldTextPlot)
PCA <- PCA + theme(axis.text = boldTextAxis)

# Repeling the data labels with ggrepel
PCA <- PCA + 
  geom_label_repel(aes(label = sample_id, size = 19),
                   box.padding   = 0.7, 
                   point.padding = 0.7,
                   segment.color = 'black', label.size = 0.50)

# Return PCA to check final plot
PCA

# Create a Heatmap for your samples
plot_sample_heatmap(so, use_filtered = TRUE, color_high = "white", color_low = "dodgerblue",
                    x_axis_angle = 75)

# Assign the Heatmap to the variable 'Heat'
Heat <- plot_sample_heatmap(so, use_filtered = TRUE, color_high = "white", color_low = "dodgerblue",
                            x_axis_angle = 75)

# Return the plot check that it works
Heat

# Creating the plot edits (Bold Elements)
Heat <- Heat + theme(axis.text = boldTextAxis, text = boldTextPlot)
Heat <- Heat + aes(size = 19, face = "bold")

# Return 'Heat' to check final plot
Heat
